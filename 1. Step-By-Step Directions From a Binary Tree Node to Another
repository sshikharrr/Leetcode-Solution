/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
string sp="";
string d="";
    bool help(TreeNode* root,int t,bool s ){
        if(root==NULL){
            return false;
        }
        if(root->val==t){
            return true;
        }
        bool l=help(root->left,t,s);
        if(l){
            if(s) sp+="L";
            else{
                d+='L';
            }
            return true;
        }
        bool r= help(root->right,t,s);
        if(r){
            if(s){
                sp+='R';
            }
                else{
                    d+="R";
                }
            
            return true;
    }
        return false;
    }
    string getDirections(TreeNode* root, int startValue, int destValue) {
        help(root,startValue,true);
        help(root,destValue,false);
        
        reverse(d.begin(),d.end());
        reverse(sp.begin(),sp.end());
        int i=0,j=0;
        while(i<sp.length() && j<d.length()){
            if(sp[i]==d[j]){
                i++;
                j++;
            }
            else{
                break;
            }
        }
        string ans="";
        while(i<sp.length()){
            ans+="U";
            i++;
        }
        ans+=d.substr(j);
        return ans;
    }
};
