/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void help( vector<TreeNode*>&v,TreeNode*root, unordered_set<int>s,TreeNode*p){
        if(root==NULL) return ;
        help(v,root->left,s,root);
        help(v,root->right,s,root);
        if(s.find(root->val)!=s.end()){
            if(root->left!=NULL) v.push_back(root->left);
            if(root->right!=NULL) v.push_back(root->right);
            if(p==NULL) {}
            else if(p->left==root) p->left=NULL;
            else if(p->right==root) p->right=NULL;
        }
    }
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        vector<TreeNode*>v;
        unordered_set<int>s(to_delete.begin(),to_delete.end());
        // for(auto i:to_delete){
        //     s.insert(i);
        // }
        if(s.find(root->val)==s.end()) v.push_back(root);
        help(v,root,s,nullptr);
        return v;
    }
};
