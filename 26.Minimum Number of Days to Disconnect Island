class Solution {
public:
    void dfs(int row,int col,vector<vector<int>>& grid,vector<vector<int>>&vis)
    {
        int n = grid.size();
        int m = grid[0].size();
        vis[row][col]=1;
        int delrow[] = {1, -1, 0, 0};
        int delcol[] = {0, 0, 1, -1};

        for(int i=0;i<4;i++)
        {
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];

if(nrow>=0&&nrow<n&&ncol>=0&&ncol<m&&!vis[nrow][ncol]&&grid[nrow][ncol]==1)
            {
            dfs(nrow,ncol,grid,vis);
            }
        }
    }
    int countIsland(vector<vector<int>>& grid)
      {  
        int n=grid.size();
        int m=grid[0].size();
        int island=0;
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j]==1)
                {
                    dfs(i,j,grid,vis);
                    island++;
                }
            }
        }
        return island;
    }
    int minDays(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int islands=countIsland(grid);
   
        if (islands > 1 or islands == 0)
        {
            return 0;
        }
        else
        {
            for (int i = 0 ; i < n; i ++)
            {
                for (int j = 0; j < m; j++)
                {
                    if (grid[i][j])
                    {
                        grid[i][j] = 0;

                        islands = countIsland(grid);
	
                        grid[i][j] = 1;
                        if (islands > 1 or islands == 0)
                            return 1;
                    }

                }
            }
        }

        return 2;
    }
};
